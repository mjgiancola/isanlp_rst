import pandas as pd

text_html_map = {
    #     r'\n': r' ',
    r'<': r' –º–µ–Ω–µ–µ ',
    r'&lt;': r' –º–µ–Ω–µ–µ ',
    r'>': r' –±–æ–ª–µ–µ ',
    r'&gt;': r' –±–æ–ª–µ–µ ',
    r'&amp;': r'&',
    r'&quot;': r'"',
    r'&ndash;': r'‚Äì',
    r'&ouml;': r'o',
    r'&hellip;': r'...',
    r'&eacute;': r'e',
    r'&aacute;': r'a',
    r'&rsquo;': r"'",
    r'&lsquo;': r"'",
    r' & ': r' and ',  #
    r'&id=': r'_id=',
    r'<->': r'‚Üî',
    r'##### ': r'',
    r'\\\\\\\\': r'\\',
    r'  ': r' ',
    r'‚Äî‚Äî': r'-',
    r'‚Äî': r'-',
    r'\^': r'',
    r'^': r'',
    r'¬±': r'+',
    r'x': r'—Ö',
    r'y': r'—É',
    r'compan—É': r'company',
    r'kaspersk—É': r'kaspersky',
}

SYMBOL_MAP = {
    'x': '—Ö',
    'X': 'X',
    'y': '—É',
    '‚Äî': '-',
    '‚Äú': '¬´',
    '‚Äò': '¬´',
    '‚Äù': '¬ª',
    '‚Äô': '¬ª',
    'üòÜ': 'üòÑ',
    'üòä': 'üòÑ',
    'üòë': 'üòÑ',
    'üòî': 'üòÑ',
    'üòâ': 'üòÑ',
    '‚ùó': 'üòÑ',
    'ü§î': 'üòÑ',
    'üòÖ': 'üòÑ',
    '‚öì': 'üòÑ',
    'Œµ': 'Œ±',
    'Œ∂': 'Œ±',
    'Œ∑': 'Œ±',
    'Œº': 'Œ±',
    'Œ¥': 'Œ±',
    'Œª': 'Œ±',
    'ŒΩ': 'Œ±',
    'Œ≤': 'Œ±',
    'Œ≥': 'Œ±',
    '„Å®': 'Â∞ã',
    '„ÅÆ': 'Â∞ã',
    'Á•û': 'Â∞ã',
    'Èö†': 'Â∞ã',
    '„Åó': 'Â∞ã',
    '√®': 'e',
    'ƒï': 'e',
    '√ß': 'c',
    '“´': 'c',
    '—ë': '–µ',
    '–Å': '–ï',
    u'√∫': 'u',
    u'√é': 'I',
    u'√á': 'C',
    u'“™': 'C',
    '¬£': '$',
    '‚ÇΩ': '$',
    '”ë': 'a',
    'ƒÇ': 'A',
}

text_html_map.update(SYMBOL_MAP)

second_map = {
    r'&': r'_',
}


def split_bibliography(text_edus):
    for value in (' 1\\.', ' 2\\.', ' 3\\.', ' 4\\.', ' 5\\.', ' 6\\.', ' 7\\.', ' 8\\.', ' 9\\.', ' 10\\.',
                  ' 11\\.', ' 12\\.', ' 13\\.', ' 14\\.', ' 15\\.', ' 16\\.', ' 17\\.', ' 18\\.', ' 19\\.', ' 20\\.',
                  ' –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ', ' –í —Å—Ç–∞—Ç—å–µ', ' –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ', ' –°—Ç–∞—Ç—å—è –ø–æ—Å–≤—è—â–µ–Ω–∞',
                  ' –û—Ç–º–µ—á–µ–Ω–æ,', ' –ü–æ–∫–∞–∑–∞–Ω–æ, ', ' –í—ã—è–≤–ª–µ–Ω–æ,', ' –ö–ª—é—á–µ–≤—ã–µ', ' –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è', ' –ù–∞ –ø—Ä–∏–º–µ—Ä–µ',
                  ' –í —á–∞—Å—Ç–Ω–æ—Å—Ç–∏,', ' –í —Ä–∞–±–æ—Ç–µ', ' –û—Å–æ–±–æ–µ', ' –ê–≤—Ç–æ—Ä ', ' –í –æ—Ç–Ω–æ—à–µ–Ω–∏–∏', ' –ë—ã–ª–æ', ' –°—Ä–µ–¥–∏', ' –í—ã–±–æ—Ä',
                  ' –í –∫–∞—á–µ—Å—Ç–≤–µ', ' –¢–∞–∫–∏–µ',
                  ):
        text_edus = text_edus.replace(value, '\n' + value[1:])

    while '\n\n' in text_edus:
        text_edus = text_edus.replace('\n\n', '\n')

    return text_edus.strip()


def read_edus(filename):
    edus = []
    with open(filename + '.edus', 'r') as f:
        edus_text = f.read()
        edus_text = edus_text.replace('#####', '\n')
        edus_text = split_bibliography(edus_text)

        for line in edus_text.split('\n'):
            edu = str(line.strip())
            for key, value in text_html_map.items():
                edu = edu.replace(key, value)
            for key, value in second_map.items():
                edu = edu.replace(key, value)
            edus.append(edu)
    return edus


def read_annotation(filename):
    annot = pd.read_pickle(filename + '.annot.pkl')
    annot['text'] = _prepare_text(annot['text'])
    return annot


def read_gold(filename, features=False):
    if features:
        df = pd.read_pickle(filename + '.gold.pkl')
    else:
        df = pd.read_feather(filename + '.fth')

    for key in text_html_map.keys():
        df['snippet_x'].replace(key, text_html_map[key], regex=True, inplace=True)
        df['snippet_y'].replace(key, text_html_map[key], regex=True, inplace=True)

    for key in second_map.keys():
        df['snippet_x'].replace(key, second_map[key], regex=True, inplace=True)
        df['snippet_y'].replace(key, second_map[key], regex=True, inplace=True)

    df = df[df['snippet_x'].map(len) > 0]
    df = df[df['snippet_y'].map(len) > 0]

    return df


def read_negative(filename, features=False):
    if features:
        return pd.read_pickle(filename + '.neg.features')
    return pd.read_json(filename + '.json.neg')


def prepare_text(text):
    text = text.replace('  \n', '#####')
    text = text.replace(' \n', '#####')
    text = text + '#####'
    text = text.replace('#####', '\n')
    text_html_map = {
        '\n': r' ',
        '&gt;': r'>',
        '&lt;': r'<',
        '&amp;': r'&',
        '&quot;': r'"',
        '&ndash;': r'‚Äì',
        '##### ': r'',
        '\\\\\\\\': r'\\',
        '<': ' –º–µ–Ω–µ–µ ',
        '&lt;': ' –º–µ–Ω–µ–µ ',
        r'>': r' –±–æ–ª–µ–µ ',
        r'&gt;': r' –±–æ–ª–µ–µ ',
        r'‚Äû': '"',
        r'&amp;': r'&',
        r'&quot;': r'"',
        r'&ndash;': r'‚Äì',
        r'&ouml;': r'o',
        r'&hellip;': r'...',
        r'&eacute;': r'e',
        r'&aacute;': r'a',
        r'&rsquo;': r"'",
        r'&lsquo;': r"'",
        ' & ': ' and ',  #
        '&id=': r'_id=',
        #         '&': '_',
        '‚Äî‚Äî': r'-',
        '‚Äî': r'-',
        # '/': r'',
        '\^': r'',
        '^': r'',
        '¬±': r'+',
        'y': r'—É',
        'xc': r'—Ö—Å',
        'x': r'—Ö',
        r'compan—É': r'company',
        r'kaspersk—É': r'kaspersky',
    }

    for key in text_html_map.keys():
        text = text.replace(key, text_html_map[key])

    for key in second_map.keys():
        text = text.replace(key, second_map[key])

    while '  ' in text:
        text = text.replace('  ', ' ')

    return text


def _prepare_text(text):
    text = text.replace('  \n', '#####')
    text = text.replace(' \n', '#####')
    text = text + '#####'
    text = text.replace('#####', '\n')
    #     text_html_map = {
    #         '&gt;': r'>',
    #         '&lt;': r'<',
    #         '&amp;': r'&',
    #         '&quot;': r'"',
    #         '&ndash;': r'‚Äì',
    #         '##### ': r'',
    #         '\\\\\\\\': r'\\',
    #         '<': ' –º–µ–Ω–µ–µ ',
    #         '&lt;': ' –º–µ–Ω–µ–µ ',
    #         r'>': r' –±–æ–ª–µ–µ ',
    #         r'&gt;': r' –±–æ–ª–µ–µ ',
    #         r'‚Äû': '"',
    #         r'&amp;': r'&',
    #         r'&quot;': r'"',
    #         r'&ndash;': r'‚Äì',
    #         r'&ouml;': r'o',
    #         r'&hellip;': r'...',
    #         r'&eacute;': r'e',
    #         r'&aacute;': r'a',
    #         r'&rsquo;': r"'",
    #         r'&lsquo;': r"'",
    #         ' & ': ' and ',  #
    #         '&id=': r'_id=',
    # #         '&': '_',
    #         '‚Äî‚Äî': r'-',
    #         '‚Äî': r'-',
    #         #'/': r'',
    #         '\^': r'',
    #         '^': r'',
    #         '¬±': r'+',
    #         'y': r'—É',
    #         'xc': r'—Ö—Å',
    #         'x': r'—Ö',
    #          r'compan—É': r'company',
    #          r'kaspersk—É': r'kaspersky',
    #     }

    for key in text_html_map.keys():
        text = text.replace(key, text_html_map[key])

    for key in second_map.keys():
        text = text.replace(key, second_map[key])

    while '  ' in text:
        text = text.replace('  ', ' ')

    return text
